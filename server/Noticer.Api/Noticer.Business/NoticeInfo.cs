//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    NoticeInfo
// ObjectType:  NoticeInfo
// CSLAType:    ReadOnlyObject

using System;
using Csla;
using Noticer.Dto;

namespace Noticer.Business
{

    /// <summary>
    /// NoticeInfo (read only object).<br/>
    /// This is a generated base class of <see cref="NoticeInfo"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="NoticeColl"/> collection.
    /// </remarks>
    [Serializable]
    public partial class NoticeInfo : ReadOnlyBase<NoticeInfo>
    {

        #region Business Properties

        /// <summary>
        /// Gets the Notice Id.
        /// </summary>
        /// <value>The Notice Id.</value>
        public Int64 NoticeId { get; private set; }

        /// <summary>
        /// Gets the Title.
        /// </summary>
        /// <value>The Title.</value>
        public string Title { get; private set; }

        /// <summary>
        /// Gets the Content.
        /// </summary>
        /// <value>The Content.</value>
        public string Content { get; private set; }

        /// <summary>
        /// Gets the Url.
        /// </summary>
        /// <value>The Url.</value>
        public string Url { get; private set; }

        /// <summary>
        /// Gets the Last User.
        /// </summary>
        /// <value>The Last User.</value>
        public int LastUser { get; private set; }

        /// <summary>
        /// Maintains metadata about <see cref="LastModefied"/> property.
        /// </summary>
        private static readonly PropertyInfo<DateTime> LastModefiedProperty = RegisterProperty<DateTime>(p => p.LastModefied, "Last Modefied");
        /// <summary>
        /// Gets the Last Modefied.
        /// </summary>
        /// <value>The Last Modefied.</value>
        public DateTime LastModefied
        {
            get { return GetProperty(LastModefiedProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="NoticeInfo"/> object from the given NoticeDto.
        /// </summary>
        /// <param name="data">The <see cref="NoticeDto"/>.</param>
        /// <returns>A reference to the fetched <see cref="NoticeInfo"/> object.</returns>
        internal static NoticeInfo GetNoticeInfo(NoticeDto data)
        {
            NoticeInfo obj = new NoticeInfo();
            obj.Fetch(data);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="NoticeInfo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private NoticeInfo()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="NoticeInfo"/> object from the given <see cref="NoticeDto"/>.
        /// </summary>
        /// <param name="data">The NoticeDto to use.</param>
        private void Fetch(NoticeDto data)
        {
            // Value properties
            NoticeId = data.NoticeId;
            Title = data.Title;
            Content = data.Content;
            Url = data.Url;
            LastUser = data.LastUser;
            LoadProperty(LastModefiedProperty, data.LastModefied);
            var args = new DataPortalHookArgs(data);
            OnFetchRead(args);
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
