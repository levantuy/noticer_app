//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    NoticeDal
// ObjectType:  SQL Server implementation of INoticeDal (Notice)
// CSLAType:    EditableRoot

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Csla.Data;
using MySql.Data.MySqlClient;
using Noticer.Dto;

namespace Noticer.Dal
{
    /// <summary>
    /// DAL SQL Server implementation of <see cref="INoticeDal"/>
    /// </summary>
    public partial class NoticeDal : INoticeDal
    {
        /// <summary>
        /// Loads a Notice object from the database.
        /// </summary>
        /// <param name="noticeId">The fetch criteria.</param>
        /// <returns>A NoticeDto object.</returns>
        public NoticeDto Fetch(Int64 noticeId)
        {
            using (var ctx = ConnectionManager<MySqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new MySqlCommand("Notice_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@p_NoticeId", noticeId).DbType = DbType.Int64;
                    var dr = cmd.ExecuteReader();
                    return Fetch(dr);
                }
            }
        }

        private NoticeDto Fetch(IDataReader data)
        {
            var notice = new NoticeDto();
            using (var dr = new SafeDataReader(data))
            {
                if (dr.Read())
                {
                    notice.NoticeId = dr.GetInt64("NoticeId");
                    notice.Title = dr.GetString("Title");
                    notice.Content = dr.GetString("Content");
                    notice.Url = !dr.IsDBNull("Url") ? dr.GetString("Url") : null;
                    notice.LastUser = dr.GetString("LastUser");
                    notice.LastModefied = !dr.IsDBNull("LastModefied") ? dr.GetSmartDate("LastModefied", true) : null;
                }
            }
            return notice;
        }

        /// <summary>
        /// Inserts a new Notice object in the database.
        /// </summary>
        /// <param name="notice">The Notice DTO.</param>
        /// <returns>The new <see cref="NoticeDto"/>.</returns>
        public NoticeDto Insert(NoticeDto notice)
        {
            using (var ctx = ConnectionManager<MySqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new MySqlCommand("Notice_Add", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@p_NoticeId", notice.NoticeId).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@p_Title", notice.Title).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@p_Content", notice.Content).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@p_Url", notice.Url == null ? (object)DBNull.Value : notice.Url).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@p_LastUser", notice.LastUser).DbType = DbType.String;
                    cmd.ExecuteNonQuery();
                    //notice.NoticeId = Convert.ToInt64(cmd.Parameters["@p_NoticeId"].Value.ToString());
                }
            }
            return notice;
        }

        /// <summary>
        /// Updates in the database all changes made to the Notice object.
        /// </summary>
        /// <param name="notice">The Notice DTO.</param>
        /// <returns>The updated <see cref="NoticeDto"/>.</returns>
        public NoticeDto Update(NoticeDto notice)
        {
            //using (var ctx = ConnectionManager<MySqlConnection>.GetManager("Connection"))
            //{
            //    using (var cmd = new MySqlCommand("noticer.t_ins", ctx.Connection))
            //    {
            //        cmd.CommandType = CommandType.StoredProcedure;
            //        cmd.Parameters.AddWithValue("@p_s1", notice.NoticeId).DbType = DbType.String;
            //        cmd.Parameters["@p_s1"].Direction = ParameterDirection.Input;                    
            //        var rowsAffected = cmd.ExecuteNonQuery();
            //        if (rowsAffected == 0)
            //            throw new DataNotFoundException("Notice");
            //    }
            //}
            //return notice;

            using (var ctx = ConnectionManager<MySqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new MySqlCommand("Notice_Upd", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@p_NoticeId", notice.NoticeId).DbType = DbType.Int64;
                    cmd.Parameters["@p_NoticeId"].Direction = ParameterDirection.Input;
                    //MySqlParameter someString = new MySqlParameter("@p_Title", MySqlDbType.VarChar, 255);
                    //someString.Value = notice.Title;
                    //cmd.Parameters.Add(someString);
                    cmd.Parameters.AddWithValue("@p_Title", notice.Title);
                    cmd.Parameters["@p_Title"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@p_Content", notice.Content);
                    cmd.Parameters["@p_Content"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@p_Url", notice.Url);
                    cmd.Parameters["@p_Url"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@p_LastUser", notice.LastUser);
                    cmd.Parameters["@p_LastUser"].Direction = ParameterDirection.Input;
                    var rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected == 0)
                        throw new DataNotFoundException("Notice");
                }
            }
            return notice;
        }

        /// <summary>
        /// Deletes the Notice object from database.
        /// </summary>
        /// <param name="noticeId">The delete criteria.</param>
        public void Delete(Int64 noticeId)
        {
            using (var ctx = ConnectionManager<MySqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new MySqlCommand("Notice_Delete", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@p_NoticeId", noticeId).DbType = DbType.Int64;
                    var rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected == 0)
                        throw new DataNotFoundException("Notice");
                }
            }
        }
    }
}
